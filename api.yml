openapi: 3.0.3
info: 
  title: stupid-backend
  license:
    name: MIT License
    url: https://github.com/CalebQ42/stupid-backend/blob/main/LICENSE
  version: 1.0.0
components:
  schemas:
    plat:
      type: string
      description: Device's platform. Android, iOS, Web, Linux, Windows, etc.
      default: "Android"
    API Key:
      type: object
      properties:
        _id:
          type: string
          description: The key itself
        appID:
          type: string
          description: Human readable description of the key
        death:
          type: integer
          default: -1
          description: Unix timestamp of the planned death of the key. If -1, there is no planned death, but may be retired at any time without notice.
        features:
          type: object
          description: A Map[string]boolean describing the allowed functions of the key. The given defaults are the features implemented by base stupid-backend and may be extended for extended features (such as data retrieval).
          default:
            log: true
            registeredUsers: true
            sendCrash: true
            backend: false
    Create User Request:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
        email:
          type: string
          format: email
    Registered User:
      type: object
      properties:
        _id:
          type: string
          description: UUID of the user
        username:
          type: string
        password:
          type: string
          format: password
          description: argon2ID 32 byte hashed password. Base64 Encoded.
        salt:
          type: string
          description: 16 byte salt. Base64 Encoded.
        email:
          type: string
          format: email
        failed:
          type: integer
          description: Number of failed attempts. Timeout occurs every 3 fails.
        lastTimeout:
          type: integer
          description: Unix timestamp of the last timeout.
    Logged Connection:
      type: object
      properties:
        _id:
          type: string
          description: Device's UUID
        plat:
          $ref: "#/components/schemas/plat"
        lastConn:
          type: integer
          description: YYYYMMDD of the last day device was connected.
          default: 20221006
    SingleCrash:
      type: object
      properties:
        _id:
          type: string
          description: UUID of this particular crash.
        err:
          type: string
          description: The error
        plat:
          $ref: "#/components/schemas/plat"
        stack:
          type: string
          description: Stacktrace
    Crashes:
      type: object
      properties:
        _id:
          type: string
          description: UUID of this particular crash
        err:
          type: string
          description: The error
        first:
          type: string
          description: The first line of the stacktrace for better grouping.
        crashes:
          type: array
          items:
            $ref: "#/components/schemas/SingleCrash"
    CreateUserReq:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
          description: Password must be between 5 - 32 characters long.
        email:
          type: string
          format: email
    CreateUserResp:
      type: object
      properties:
        token:
          type: string
          description: JWT authentication token
        problem:
          type: string
          description: If there's a problem with creating the user, problem is populated. If username, username is already taken. If password, password isn't valid.
    AuthReq:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    AuthResp:
      type: object
      properties:
        token:
          type: string
          description: JWT token
        timeout:
          type: integer
          description: The remaining minutes until timeout is done. 0 if not timed out.
    Data:
      type: object
      nullable: true
      description: The needed fields for DefaultDataApp, and also suggested fields for custom implementations. Further fields WILL be present.
      properties:
        _id:
          type: string
          description: UUID of the data
        owner:
          type: string
          description: UUID of the registered user that owns this data.
        hint:
          type: string
          description: A hint at the contents of the content.
    DataIDs:
      type: object
      description: Returns when using list Data request.
      properties:
        _id:
          type: string
          description: UUID of the data
        hint:
          type: string
          description: A hint about the data content.
    DataResp:
      type: object
      description: Response from a data request. Only the fields requested will be populated.
      properties:
        ids:
          description: Only populated when doing a list data request.
          nullable: true
          type: array
          items:
            $ref: "#/components/schemas/DataIDs"
        data:
          $ref: "#/components/schemas/Data" #Only present if given a data UUID.
        allData:
          description: Populated when doing an allData data request.
          nullable: true
          type: array
          items:
            $ref: "#/components/schemas/Data"
  parameters:
    Key:
      name: key
      description: API Key used
      in: query
      required: true
      schema:
        type: string
paths:
  /features:
    description: Get the details of the API Key, including it's features
    parameters:
      - $ref: "#/components/parameters/Key"
    get:
      responses:
        '200':
          description: Returns the API Key itself
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/API Key"
        '401':
          description: API Key is invalid
  /log:
    description: Log a device
    parameters:
      - $ref: "#/components/parameters/Key"
      - name: uuid
        in: query
        required: true
        schema:
          type: string
      - name: plat
        in: query
        required: true
        schema:
          type: string
        example: Android
    post:
      responses:
        '201':
          description: Succcessfully logged
        '401':
          description: API Key is invalid or doesn't have permission.
  /crash:
    description: Log a crash
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SingleCrash"
      parameters:
        - $ref: "#/components/parameters/Key"
      responses:
        '201':
          description: Succcessfully logged
        '401':
          description: API Key is invalid or doesn't have permission.
  /createUser:
    description: Create a new registered user.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserReq"
      parameters:
        - $ref: "#/components/parameters/Key"
      responses:
        '200':
          description: Successfully created user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserResp"
        '401':
          description: API Key is invalid or doesn't have permission.
  /auth:
    description: Authenticate
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthReq"
      parameters:
        - $ref: "#/components/parameters/Key"
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResp"
        '401':
          description: API Key is invalid or doesn't have permission.
  /data:
    description: Data request for DefaultDataApp.
    get:
      parameters:
        - $ref: "#/components/parameters/Key"
        - name: token
          description: JWT token for authenticated data requests. If present, only returns results that the user owns.
          in: query
          schema:
            type: string
        - name: req
          description: What you want to get from the request. req or uuid MUST be present. list - get UUIDs of available data along with hints. allData - get all available data.
          in: query
          schema:
            type: string
        - name: uuid
          description: Which data to retrieve. req or uuid MUST be present.
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Returns the requested data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataResp"
        '204':
          description: req or uuid returned no results.
        '400':
          description: Both req and uuid are present, or neither are present.
        '401':
          description: API Key is invalid or doesn't have permission.